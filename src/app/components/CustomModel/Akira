'use client';
import { useState, useEffect } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF, useTexture } from '@react-three/drei';
import * as THREE from 'three';

export default function CustomModel() {
  const [isClient, setIsClient] = useState(false);
  useEffect(() => {
    setIsClient(true);
  }, []);  // Leeres Array sorgt daf√ºr, dass es nur einmal beim ersten Rendern aufgerufen wird

  return (
    <div style={{ width: '100%', height: '50vh', maxWidth: '1600px', margin: '0 auto' }}>
      <Canvas
        camera={{
          position: [0, 0, 5],
          fov: 45
        }}
      >
        <ambientLight intensity={0.3} />
        <directionalLight position={[5, 5, 5]} intensity={0.8} />
        <Model />
        {isClient && <OrbitControls />}
      </Canvas>
    </div>
  );
}

function Model() {
  const { scene } = useGLTF('/assets/models/AkiraBike/model.glb');
  const textures = useTexture({
    // Bike Images
    Bike: '/assets/models/AkiraBike/textures/Bike.png',
    SpecularMap: '/assets/models/AkiraBike/textures/SpecularMap.png',
    black: '/assets/models/AkiraBike/textures/black.png',
    // vehicle Images
    vehicle: '/assets/models/AkiraBike/textures/vehicle.png',
    normalMap: '/assets/models/AkiraBike/textures/normalMap.png', // Normal Map
    blackwhite: '/assets/models/AkiraBike/textures/blackwhite.png', // Normal Map for vehicle
    white: '/assets/models/AkiraBike/textures/white.png',
  });

  // Texturen den spezifischen Teilen des Modells zuweisen
  scene.traverse((child) => {
    if (child.isMesh) {
      switch(child.name.toLowerCase()) {
        case 'bike':
          child.material.map = textures.Bike;
          child.material.normalMap = textures.normalMap;
          child.material.specularMap = textures.SpecularMap;
          child.material.emissive = new THREE.Color(0x000000);
          break;
        case 'vehicle':
          child.material.map = textures.vehicle;
          child.material.normalMap = textures.blackwhite;
          child.material.specularMap = textures.SpecularMap;
          child.material.emissive = new THREE.Color(0x000000);
          break;
        case 'black':
          child.material.map = textures.black;
          break;
        case 'white':
          child.material.map = textures.white;
          break;
        default:
          child.material.map = textures.Bike;
      }

      // Apply repeat scaling only to maps that exist
      if (child.material.map) {
        child.material.map.repeat.set(0.51, 0.31);
      }
    }
  });

  scene.scale.set(0.02, 0.02, 0.02);
  scene.position.set(0, -2, 0);
  scene.rotation.set(0, Math.PI / 2, 0);

  return <primitive object={scene} />;
}
